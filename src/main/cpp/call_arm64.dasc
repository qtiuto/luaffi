/* vim: ts=4 sw=4 sts=4 et tw=78
 * Portions copyright (c) 2015-present, Facebook, Inc. All rights reserved.
 * Portions copyright (c) 2011 James R. McKaskill.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

|.arch arm64

|.actionlist build_actionlist
|.globalnames globnames
|.externnames extnames

#define JUMP_SIZE 16

//in aarch64 the pc is indicated the current 
#define MIN_BRANCH ((INT32_MIN) >> 6)
#define MAX_BRANCH ((INT32_MAX) >> 6)
//arm64 pc has no offset so comparing with next instruction is -4 
#define BRANCH_OFF -4

static void compile_extern_jump(struct jit* jit, lua_State* L, cfunction func, uint8_t* code)
{
    /* The jump code is the function pointer followed by a stub to call the
     * function pointer. The stub exists so we can jump to functions with an
     * offset greater than 128MB.
     *
     * Note we have to manually set this up since there are commands buffered
     * in the jit state.
     */
	 
	 //l: ptr
	 *(cfunction*) code = func;
	 // ldr x9,#-8
	  *(uint32_t*) &code[8] = 0x58FFFFC9;
	 //br x9
	 *(uint32_t*) &code[12] = 0xD61F0120;
	
}

|.define TOP, x19
|.define DATA,x20
|.define L_ARG,x21
|.macro load64, reg, val
//| ldr reg, >5
//| b >6
//|5:
//|.long64 val
//|6:
| mov reg, #(unsigned short)(val)
| movk reg, #(((unsigned int)(val))>>16), lsl #16
| movk reg, #(unsigned short)((unsigned long)(val)>>32), lsl #32
| movk reg, #(unsigned short)((unsigned long)(val)>>48), lsl #48
|.endmacro

|.macro load32, reg, val
| mov reg, #(unsigned short)(val)
| movk reg, #(((unsigned int)(val))>>16), lsl #16
|.endmacro

|.macro lcall, func
| mov x0, L_ARG
| bl func
|.endmacro

void compile_globals(struct jit* jit, lua_State* L)
{
    (void) jit;
}
typedef struct reg_info{
	uint8_t ints;
	uint8_t floats;
} reg_info;

static ALWAYS_INLINE reg_info caculateRegs(lua_State* L,int ct_usr,int nargs){
    int i;reg_info regs;
    const struct ctype* mt;
    for (i = 1,regs.ints=0,regs.floats=0; i <= nargs&&(regs.floats<8||regs.ints<8); ++i){
		lua_rawgeti(L, ct_usr, i);
        mt = (const struct ctype*) lua_touserdata(L, -1);
		if (mt->pointers || mt->is_reference) {
			if(regs.ints<8)regs.ints++;
		}else{
			switch(mt->type){
				case COMPLEX_DOUBLE_TYPE:
				case COMPLEX_FLOAT_TYPE:
					if(regs.floats<7)
						regs.floats+=2;
					else if(regs.floats==7)
						regs.floats=8;
					break;
				case FLOAT_TYPE:
				case DOUBLE_TYPE:
					if(regs.floats<8) ++regs.floats;
					break;
				default:
					if(regs.ints<8)++regs.ints;//no need to check type support here
			}
		}
		lua_pop(L,1);
	}
	
	return regs;
}
// arm store/load range for immediate value is only -256-255
static ALWAYS_INLINE void load_int(struct jit* Dst,reg_info* regs){
	if(regs->ints<8)
		| ldr x1, [sp, #0x60+(regs->ints++<<3)] //64 bit ptr
	else
		| ldr x1, [DATA], #8
}
static ALWAYS_INLINE void load_float(struct jit* Dst,reg_info* regs,int isFloat,int isComplex){
	if(regs->floats<8){
		if(!isComplex||regs->floats==7){
			| ldr d0, [sp, #0x20+(regs->floats++<<3)] //64 bit ptr
			if(isComplex){
				if(isFloat){
					| ldr s1, [DATA], #8
				}else{
					| ldr d1, [DATA], #8
				}
			}
		}else{
			| ldp d0,d1, [sp, #0x20+(regs->floats<<3)] //64 bit ptr
			regs->floats+=2;
		}
	}else if(isComplex){
		if(isFloat){
			//complex float is packed as one double on stack
			| ldp s0,s1, [DATA], #8
		}else{
			| ldp d0, d1, [DATA], #16
		}
	}else {
		if(isFloat){
			| ldr s0, [DATA], #8
		}else {
			| ldr d0, [DATA], #8
		}
	}
			
	
}

cfunction compile_callback(lua_State* L, int fidx, int ct_usr, const struct ctype* ct)
{
    struct jit* Dst = get_jit(L);;
    int i, nargs, num_upvals, ref;
    const struct ctype* mt;

    int top = lua_gettop(L);

    ct_usr = lua_absindex(L, ct_usr);
    fidx = lua_absindex(L, fidx);
    nargs = (int) lua_rawlen(L, ct_usr);

    dasm_setup(Dst, build_actionlist);

    lua_newtable(L);
    lua_pushvalue(L, -1);
    ref = luaL_ref(L, LUA_REGISTRYINDEX);
    num_upvals = 0;

    if (ct->has_var_arg) {
        luaL_error(L, "can't create callbacks with varargs");
    }

	reg_info regs=caculateRegs(L,ct_usr,nargs);
	
	if(regs.ints||regs.floats){
		| sub sp,sp,#0xa0
	}else{
		| sub sp,sp,#0x20
	}
	//8 integer reigsters and 8 floating registers
	switch(regs.ints){
		case 8:
		case 7:
			| stp x6,x7, [sp,#0x90]
		case 6:
		case 5:
			| stp x4,x5, [sp,#0x80]
		case 4:
		case 3:
			| stp x2,x3, [sp,#0x70]
		case 2:
		case 1:
			| stp x0,x1, [sp,#0x60]	
			| mov x10,sp
	}	

	switch(regs.floats){
		case 8:
		case 7:
			| stp d6,d7, [sp,#0x50]
		case 6:
		case 5:
			| stp d4,d5, [sp,#0x40]
		case 4:
		case 3:
			| stp d2,d3, [sp,#0x30]
		case 2:
		case 1:
			| stp d0,d1, [sp,#0x20]
			| mov x11,sp	
	} 
	| stp x29, x30,[sp,#0x10]
	| stp DATA, L_ARG,[sp]
	
	if(regs.ints==8||regs.floats==8){ // may be overflowed if it's full
		| add DATA, sp, #0xa0
	}
	
    /* get the lua function */
    lua_pushvalue(L, fidx);
    lua_rawseti(L, -2, ++num_upvals);
	
	| load64 L_ARG, L
	| load32 w2, ref
	| load32 w1, LUA_REGISTRYINDEX
	| lcall extern rawgeti //get the table
	
	| mov w2, #num_upvals
    | movn x1, #0 // -1
    | lcall extern rawgeti //get the function
	

    for (i = 1,regs.ints=0,regs.floats=0; i <= nargs; ++i) {
        lua_rawgeti(L, ct_usr, i);
        mt = (const struct ctype*) lua_touserdata(L, -1);

        if (mt->pointers || mt->is_reference) {
            lua_getuservalue(L, -1);
            lua_rawseti(L, -3, ++num_upvals); /* usr value */
            lua_rawseti(L, -2, ++num_upvals); /* mt */
			
            | mov w2, #num_upvals-1 // usr value
            | movn x1, #i // -i-1, stack is upval table, func, i-1 args
            | lcall extern rawgeti
            | load64 x2, mt
            | movn w1, #0 // -1
            | lcall extern push_cdata
			load_int(Dst,&regs);
            | str x1, [x0]
            | movn w1, #1 //-2
            | lcall extern lua_remove // remove the usr value

        } else {
            switch (mt->type) {
			case COMPLEX_DOUBLE_TYPE:
				lua_getuservalue(L, -1);
				lua_rawseti(L, -3, ++num_upvals); /* usr value */
				lua_rawseti(L, -2, ++num_upvals); /* mt */
				
				| mov w2, #num_upvals-1 // usr value
				| movn x1, #i // -i-1, stack is upval table, func, i-1 args
				| lcall extern rawgeti
				| load64 x2, mt
				| movn w1, #0 // -1
                | lcall extern push_cdata
				load_float(Dst,&regs,0,1);
				|stp d0,d1,[x0]
                | movn w1, #1 // -2
                | lcall extern lua_remove // remove the nil usr
				
				break;
			case COMPLEX_FLOAT_TYPE:
				lua_getuservalue(L, -1);
				lua_rawseti(L, -3, ++num_upvals); /* usr value */
				lua_rawseti(L, -2, ++num_upvals); /* mt */
				
                | mov w2, #num_upvals-1 // usr value
                | movn x1, #i // -i-1, stack is upval table, func, i-1 args
                | lcall extern rawgeti
                | load64 x2, mt
                | movn w1, #0 // -1
                | lcall extern push_cdata
				load_float(Dst,&regs,1,1);
                | stp s0,s1, [x0]
                | movn w1, #1 // -2
                | lcall extern lua_remove // remove the nil usr
				
				break;
            case INT64_TYPE:
			    #if LUA_VERSION_NUM>=503
                lua_pop(L, 1);
				load_int(Dst,&regs);
                | lcall extern lua_pushinteger
				
				#else
                lua_rawseti(L, -2, ++num_upvals); /* mt */
				
                | load64 x2, mt
                | mov w1, wzr
                | lcall extern push_cdata
                load_int(Dst,&regs);
                | str x1, [x0]
                | movn w1, #1 // -2
                | lcall extern lua_remove // remove the nil usr
				
				#endif
                break;

            case INTPTR_TYPE:
                lua_rawseti(L, -2, ++num_upvals); /* mt */
				
                | load64 x2, mt
                | mov w1, wzr
                | lcall extern push_cdata
                load_int(Dst,&regs);
                | str x1, [x0]
                | movn w1, #1 // -2
                | lcall extern lua_remove // remove the nil usr
				
                break;

            case BOOL_TYPE:
                lua_pop(L, 1);
				
				load_int(Dst,&regs);
				| lcall extern lua_pushboolean
				
                break;

            case INT8_TYPE:// need to narrow for caller doesn't do it
				lua_pop(L, 1);
				if(regs.ints<8){
					if (mt->is_unsigned) {
						| ldrb w1, [sp,#0x60+(regs.ints++<<3)]
					} else {
						| ldrsb w1, [sp,#0x60+(regs.ints++<<3)]
					}
				}else {
					if (mt->is_unsigned) {
						| ldrb w1, [DATA], #8
					} else {
						| ldrsb w1, [DATA], #8
					}
				}
				| lcall extern push_int
				break;
			
            case INT16_TYPE:// need to narrow for caller doesn't do it
				lua_pop(L, 1);
				if(regs.ints<8){
					if (mt->is_unsigned) {
						| ldrh w1, [sp,#0x60+(regs.ints++<<3)]
					} else {
						| ldrsh w1, [sp,#0x60+(regs.ints++<<3)]
					}
				}else {
					if (mt->is_unsigned) {
						| ldrh w1, [DATA], #8
					} else {
						| ldrsh w1, [DATA], #8
					}
				}
				| lcall extern push_int
				break;
				
            case ENUM_TYPE:
            case INT32_TYPE:
                lua_pop(L, 1);
				load_int(Dst,&regs);
				
                | lcall extern push_int
                break;

            case FLOAT_TYPE:
                lua_pop(L, 1);
				load_float(Dst,&regs,1,0);
                | lcall extern push_float
                break;

            case DOUBLE_TYPE:
                lua_pop(L, 1);
				load_float(Dst,&regs,0,0);
                | lcall extern lua_pushnumber
                break;
				
            default:
                luaL_error(L, "NYI: callback arg type");
            }
        }
    }

    lua_rawgeti(L, ct_usr, 0);
    mt = (const struct ctype*) lua_touserdata(L, -1);

    | mov w2, #((mt->pointers || mt->is_reference || mt->type != VOID_TYPE) ? 1 : 0)
    | mov w1, #nargs
    | lcall extern lua_call
    
	|.macro retcdata, func
	| mov w2, #num_upvals-1 // usr value
	| movn x1, #1 // -2 stack is (upval table, ret val)
	| lcall extern rawgeti
	| load64 x3, mt
	| movn x2, #0 // -1 - ct_usr
	| movn x1, #1 // -2 - val
	| lcall extern func
	|.endmacro

	
    if (mt->pointers || mt->is_reference) {
        lua_getuservalue(L, -1);
        lua_rawseti(L, -3, ++num_upvals); /* usr value */
        lua_rawseti(L, -2, ++num_upvals); /* mt */

        | retcdata check_typed_pointer
        goto single_no_pop;
    } else {
        switch (mt->type) {
        case ENUM_TYPE:
            lua_getuservalue(L, -1);
            lua_rawseti(L, -3, ++num_upvals); /* usr value */
            lua_rawseti(L, -2, ++num_upvals); /* mt */

            | retcdata check_enum

            goto single_no_pop;

        case VOID_TYPE:
		    | movn w1,#1 //-2
            | lcall extern lua_settop
            lua_pop(L, 1);
            break;

        case BOOL_TYPE:
        case INT8_TYPE:
        case INT16_TYPE:
        case INT32_TYPE: //caller's responsiblity to narrow 
		    | movn w1,#0
            if (mt->is_unsigned) {
                | lcall extern check_uint32
            } else {
                | lcall extern check_int32
            }
			
            goto single;

        case INT64_TYPE:
            | movn w1,#0 //-1
            if (mt->is_unsigned) {
                | lcall extern check_uint64
            } else {
                | lcall extern check_int64
            }
			
			goto single;

        case INTPTR_TYPE:
            | movn w1,#0 //-1
            | lcall extern check_uintptr
            goto single;

        case FLOAT_TYPE:
            | movn w1,#0 //-1
            | lcall extern check_float
			
            | fmov DATA,d0
            | movn w1, #2 // -3
            | lcall extern lua_settop
            | fmov d0,DATA
            lua_pop(L, 1);
			break;
        case DOUBLE_TYPE:
            | movn w1,#0 //-1
            | lcall extern check_double
			
			| fmov DATA,d0
            | movn w1, #2 // -3
            | lcall extern lua_settop
            | fmov d0,DATA
			
            lua_pop(L, 1);
			break;
			
		case COMPLEX_DOUBLE_TYPE:

			| movn w1, #0 // -1
			| lcall extern check_complex_double
		    
			goto complex_ret;
		case COMPLEX_FLOAT_TYPE:
			| movn w1, #0 // -1
			| lcall extern check_complex_float
			
		complex_ret:	
			| mov x0,L_ARG
            | movn w1, #2 // -3
		    | fmov DATA,d0
			| fmov L_ARG,d1
            | bl extern lua_settop
            | fmov d0,DATA
			| fmov d1,L_ARG

            lua_pop(L, 1);			
			break;
        single:
            lua_pop(L, 1);
		single_no_pop:	
            | mov DATA, x0
            | movn w1, #2 // -3
            | lcall extern lua_settop
            | mov x0, DATA
            break;

        
        default:
            luaL_error(L, "NYI: callback return type");
        }
    }
	
	| ldp DATA, L_ARG,[sp]
	| ldp x29,x30,[sp,#0x10] 
	| add sp,sp, # (0x20 + ((regs.floats!=0)||(regs.ints!=0)) * 0x80)
	| ret
	
    lua_pop(L, 1); /* upval table - already in registry */
    assert(lua_gettop(L) == top);

    {
        void* p;
        struct ctype ft;
        cfunction func;

        func = compile(Dst, L, NULL, ref);

        ft = *ct;
        ft.is_jitted = 1;
        p = push_cdata(L, ct_usr, &ft);
        *(cfunction*) p = func;

        assert(lua_gettop(L) == top + 1);

        return func;
    }
}
static ALWAYS_INLINE void storeFloat(struct jit* Dst,reg_info* regs,int isFloat,int isComplex){
	if(regs->floats<8){
		if(!isComplex||regs->floats==7){
			| str d0, [sp, #(regs->floats++<<3)] //64 bit ptr
			if(isComplex){
				if(isFloat){
					| str s1, [DATA], #8
				}else{
					| str d1, [DATA], #8
				}
			}
		}else{
			| stp d0,d1, [sp, #(regs->floats<<3)] //64 bit ptr
			regs->floats+=2;
		}
	}else if(isComplex){
		//complex float is packed as one double on stack
		if(isFloat){
			| stp s0,s1, [DATA], #8
		}else{
			| stp d0, d1,[DATA], #16
		}
	}else {
		if(isFloat){
			| str s0, [DATA], #8
		}else {
			| str d0, [DATA], #8
		}
	}
}

void compile_function(lua_State* L, cfunction func, int ct_usr, const struct ctype* ct)
{
    struct jit* Dst = get_jit(L);;
    int i, nargs, num_upvals;
    const struct ctype* mt;
    void* p;

    int top = lua_gettop(L);

    ct_usr = lua_absindex(L, ct_usr);
    nargs = (int) lua_rawlen(L, ct_usr);

    p = push_cdata(L, ct_usr, ct);
    *(cfunction*) p = func;
    num_upvals = 1;

    dasm_setup(Dst, build_actionlist);

    reg_info regs={0,0};
	
	| sub sp,sp,#0x30
	| stp x29,x30,[sp,#0x20]
	| stp TOP,DATA,[sp,#0x10]
	| str L_ARG, [sp]
	| mov x29,sp
	| mov L_ARG,x0
	
    /* reserve enough stack space for all of the arguments (16 bytes per
     * argument for complex double and maintains alignment). */
	 
    if (ct->has_var_arg) {
	    | bl extern lua_gettop
        | mov TOP, x0
        | cmp TOP, #nargs
        | bge >1
		| load64 x1, "too few arguments"
        | lcall extern luaL_error
        |1:
        | sub sp, sp, TOP, lsl #4
		| mov DATA,sp
        | sub sp, sp, #0x80
    }else if(nargs>0){
        | sub sp, sp, #(nargs<<4)+0x80
		| add DATA, sp, #0x80
    }

    for (i = 1,regs.ints=0,regs.floats=0; i <= nargs; i++) {
        lua_rawgeti(L, ct_usr, i);
        mt = (const struct ctype*) lua_touserdata(L, -1);

        if (mt->pointers || mt->is_reference || mt->type == FUNCTION_PTR_TYPE || mt->type == ENUM_TYPE) {
            lua_getuservalue(L, -1);
            num_upvals += 2;

			
			| load64 x3,mt
			| load32 w2,lua_upvalueindex(num_upvals)
			| mov x1,#i
			
            if (mt->pointers || mt->is_reference) {
                | lcall extern check_typed_pointer
            } else if (mt->type == FUNCTION_PTR_TYPE) {
                | lcall extern check_typed_cfunction
            } else if (mt->type == ENUM_TYPE) {
                | lcall extern check_enum
            }
			goto longstore;

        } else {
            lua_pop(L, 1);
            | mov w1, #i

            switch (mt->type) {
            case BOOL_TYPE:
                | lcall extern check_uint32
                | cmp w0, wzr
                | cset w0, ne
                goto intstore;
				
            case INT8_TYPE:
            case INT16_TYPE: //arm64 requires callee to narrow the type
            case INT32_TYPE:
                
                | lcall extern check_int32
                
 				goto intstore;

            case INT64_TYPE:
               
                | lcall extern check_int64
               
              	goto longstore;
				
            case INTPTR_TYPE:
                | lcall extern check_uintptr
                
                goto longstore;

            case DOUBLE_TYPE:
                | lcall extern check_double
                storeFloat(Dst,&regs,0,0);
                break;

            case FLOAT_TYPE:
                | lcall extern check_float
                storeFloat(Dst,&regs,1,0);
                break;
			case COMPLEX_DOUBLE_TYPE:
                | lcall extern check_complex_double
				storeFloat(Dst,&regs,0,1);
                break;

            case COMPLEX_FLOAT_TYPE:
                | lcall extern check_complex_float
				storeFloat(Dst,&regs,1,1);
                break;
				
			intstore:
				if(regs.ints<8)
					| str w0, [sp,#0x40+(regs.ints++<<3)]
				else
					| str w0, [DATA], #8
				
                break;
			longstore:
				if(regs.ints<8)
					| str x0, [sp,#0x40+(regs.ints++<<3)]
				else
					| str x0, [DATA], #8
                break;
				
            default:
                luaL_error(L, "NYI: call arg type");
            }
        }
    }

    if (ct->has_var_arg) {
		if(regs.floats<8){
			| add x4, sp ,#regs.floats<<3
			| mov w3, #(8-regs.floats)
			| mov x2, TOP
			| mov w1, #nargs+1
			| lcall extern unpack_varargs_float 
		}
		if(regs.ints<8){
			| add x4, sp ,#0x40+(regs.ints<<3)
			| mov w3, #(8-regs.ints)
			| mov x2, TOP
			| mov w1, #nargs+1
			| lcall extern unpack_varargs_int
		}
		|//case when DATA is not allocated, all arg is skipped
		| cmp TOP,#(nargs>8?nargs:8)
		| ble >1
		| mov x5, DATA
		| mov w3, #(8-regs.floats)
		| mov w3, #(8-regs.ints)
		| mov x2, TOP
		| mov w1, #nargs+1
		| lcall extern unpack_varargs_stack_skip
		| 1:
		regs.floats=regs.ints=8;
    }

	//pop all args in registers
	switch(regs.ints){
		case 8:
		case 7:
            | ldp x6,x7,[sp,#0x70]
		case 6:
		case 5:
            | ldp x4,x5,[sp,#0x60]
		case 4:
		case 3:
            | ldp x2,x3,[sp,#0x50]
		case 2:
		case 1:
			| ldp x0,x1,[sp,#0x40]
    }
	
	switch(regs.floats){
		case 8:
		case 7:
            | ldp d6,d7,[sp,#0x30]
		case 6:
		case 5:
            | ldp d4,d5,[sp,#0x20]
		case 4:
		case 3:
            | ldp d2,d3,[sp,#0x10]
		case 2:
		case 1:
			| ldp d0,d1,[sp]
    }
	if(regs.ints==8|| regs.floats==8){// fix stack case registers is full
		|add sp,sp,#0x80
	}
	| load64 x9,func
    | blr x9

    |.macro return
	| mov sp,x29
	| ldr L_ARG, [sp]
	| ldp TOP,DATA,[sp,#0x10]
	| ldp x29,x30,[sp,#0x20]
	| add sp,sp,#0x30
	| ret
    |.endmacro

    lua_rawgeti(L, ct_usr, 0);
    mt = (const struct ctype*) lua_touserdata(L, -1);

    if (mt->pointers || mt->is_reference || mt->type==FUNCTION_PTR_TYPE) {
        lua_getuservalue(L, -1);
        num_upvals += 2;
        | mov DATA, x0
        | load64 x2, mt
        | load32 w1, lua_upvalueindex(num_upvals)
        | lcall extern push_cdata
        | str DATA, [x0]
        | mov w0, #1
        | return

    } else {
        switch (mt->type) {
        case INT64_TYPE:
		#if LUA_VERSION_NUM>=503
			 lua_pop(L, 1);
            | mov x1, x0
            | lcall extern lua_pushinteger
            | mov w0, #1
            | return
            break;
		#endif

        case INTPTR_TYPE:
            num_upvals++;
            | mov DATA, x0
            | load64 x2, mt
            | mov w1, wzr
            | lcall extern push_cdata
            | str DATA, [x0]
            | mov w0, #1
            | return
			break;
        case VOID_TYPE:
            lua_pop(L, 1);
            | mov w0, wzr
            | return
            break;

        case BOOL_TYPE:
            lua_pop(L, 1);
            | mov w1, w0
            | lcall extern lua_pushboolean
            | mov w0, #1
            | return
            break;

        case INT8_TYPE:// we need to narrow the value before return
			lua_pop(L, 1);
            | mov w1, w0
            if (mt->is_unsigned) {
				| uxtb w1, w1
                | lcall extern push_uint
            } else {
				| sxtb w1, w1
                | lcall extern push_int
            }
            | mov w0, #1
            | return
			break;
        case INT16_TYPE:// we need to narrow the value before return
			lua_pop(L, 1);
            | mov w1, w0
            if (mt->is_unsigned) {
				| uxth w1, w1
                | lcall extern push_uint
            } else {
				| sxth w1, w1
                | lcall extern push_int
            }
            | mov w0, #1
            | return
			break;
        case INT32_TYPE:
        case ENUM_TYPE:
            lua_pop(L, 1);
            | mov w1, w0
            if (mt->is_unsigned) {
                | lcall extern push_uint
            } else {
                | lcall extern push_int
            }
            | mov w0, #1
            | return
            break;

        case FLOAT_TYPE:
            lua_pop(L, 1);
            | lcall extern push_float
            | mov w0, #1
            | return
            break;

        case DOUBLE_TYPE:
            lua_pop(L, 1);
            | lcall extern lua_pushnumber
            | mov w0, #1
            | return
            break;
		case COMPLEX_FLOAT_TYPE:
            lua_getuservalue(L, -1);
            num_upvals+=2;
            | fmov w0, s0
            | fmov w1, s1
            | orr x0, x0, x1, lsl #32
            | mov DATA, x0
            | load64 x2, mt
            | load32 w1, lua_upvalueindex(num_upvals)
            | lcall extern push_cdata
            | str DATA, [x0]
            | mov w0, #1
            | return
            break;

        case COMPLEX_DOUBLE_TYPE:
            lua_getuservalue(L, -1);
            num_upvals+=2;
            | fmov TOP, d0
            | fmov DATA, d1
            | load64 x2, mt
            | load32 w1, lua_upvalueindex(num_upvals)
            | lcall extern push_cdata
            | stp TOP,DATA, [x0]
            | mov w0, #1
            | return
            break;
        default:
            luaL_error(L, "NYI: call return type");
        }
    }

    assert(lua_gettop(L) == top + num_upvals);
	{
        cfunction f = compile(Dst, L, NULL, LUA_NOREF);
        /* add a callback as an upval so that the jitted code gets cleaned up when
         * the function gets gc'd */
        push_callback(L, f, func);
        lua_pushcclosure(L, (lua_CFunction) f, num_upvals+1);
    }
}

